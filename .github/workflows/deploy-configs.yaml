name: Deploy Configurations

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment name'
        type: string
        required: true
      tag:
        description: 'Repository tag to checkout (e.g. "v1.0.2")'
        type: string
        required: false
        default: ''

jobs:
  deploy_configs:
    name: Deploy Configurations
    runs-on: [self-hosted, "run_id:${{ github.run_id }}"]
    environment: ${{ inputs.environment }}
    permissions:
      contents: read
    env:
      NAMESPACE: ${{ secrets.NAMESPACE }}
      CONFIG_FILE: ${{ secrets.CONFIG_FILE }}
      ENVIRONMENT: ${{ secrets.ENVIRONMENT }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

    steps:
      - name: Checkout
        id: checkout
        if: ${{ inputs.tag == '' }}
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Checkout Tag
        id: checkout_tag
        if: ${{ inputs.tag != '' }}
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: refs/tags/${{ inputs.tag }}
          persist-credentials: false

      - name: Update Kubeconfig
        id: update_kubeconfig
        run: |
          set -eo pipefail

          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Create MongoDB User
        id: create_mongodb_user
        run: |
          set -eo pipefail
          source $CONFIG_FILE
          source ./deployment_functions.sh

          readModelROUsername=$(getSecretValue 'documentdb-ro-username')
          readModelROPassword=$(getSecretValue 'documentdb-ro-password')
          readModelProjectionUsername=$(getSecretValue 'documentdb-projection-username')
          readModelProjectionPassword=$(getSecretValue 'documentdb-projection-password')

          createReadModelUser "$readModelROUsername" "$readModelROPassword" "read"
          createReadModelUser "$readModelProjectionUsername" "$readModelProjectionPassword" "readWrite"

      - name: Prepare DB migrations
        id: prepare_db_migrations
        run: |
          set -eo pipefail
          source $CONFIG_FILE
          source ./deployment_functions.sh

          prepareDbMigrations

      - name: Create Namespace
        id: create_namespace
        run: |
          set -eo pipefail
          source $CONFIG_FILE
          source ./deployment_functions.sh

          applyKubeFile "namespace.yaml"

      - name: Create K8s Secrets
        id: create_secrets
        run: |
          set -eo pipefail
          source $CONFIG_FILE
          source ./deployment_functions.sh

          userRegistryApiKey="$(getSecretValue 'user-registry-api-key')"
          partyProcessApiKey="$(getSecretValue 'party-process-api-key')"
          partyManagementApiKey="$(getSecretValue 'party-management-api-key')"
          postgresUsername="$(getSecretValue 'postgres-db-username')"
          postgresPassword="$(getSecretValue 'postgres-db-password')"
          projectionUsername="$(getSecretValue 'documentdb-projection-username')"
          projectionPassword="$(getSecretValue 'documentdb-projection-password')"
          projectionROUsername="$(getSecretValue 'documentdb-ro-username')"
          projectionROPassword="$(getSecretValue 'documentdb-ro-password')"
          vaultAddr="$(getSecretValue 'vault-addr')"
          vaultToken="$(getSecretValue 'vault-token')"

          createKubeSecret 'user-registry' 'USER_REGISTRY_API_KEY' "$userRegistryApiKey"
          createKubeSecret 'party-process' 'PARTY_PROCESS_API_KEY' "$partyProcessApiKey"
          createKubeSecret 'party-management' 'PARTY_MANAGEMENT_API_KEY' "$partyManagementApiKey"
          createKubeSecret 'postgres' 'POSTGRES_USR' "$postgresUsername" 'POSTGRES_PSW' "$postgresPassword"
          createKubeSecret 'documentdb' 'PROJECTION_USR' "$projectionUsername" 'PROJECTION_PSW' "$projectionPassword" 'READONLY_USR' "$projectionROUsername" 'READONLY_PSW' "$projectionROPassword"
          createKubeSecret 'vault' 'VAULT_ADDR' "$vaultAddr" 'VAULT_TOKEN' "$vaultToken"

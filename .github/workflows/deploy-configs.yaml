name: Deploy Configurations

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment name'
        type: string
        required: true

jobs:
  deploy_configs:
    name: Deploy Configurations
    runs-on: [self-hosted, "run_id:${{ github.run_id }}"]
    environment: ${{ inputs.environment }}
    permissions:
      contents: read
    env:
      NAMESPACE: ${{ secrets.NAMESPACE }}
      CONFIG_FILE: ${{ secrets.CONFIG_FILE }}
      ENVIRONMENT: ${{ secrets.ENVIRONMENT }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Update Kubeconfig
        id: update_kubeconfig
        run: |
          set -eo pipefail

          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Create MongoDB User
        id: create_mongodb_user
        if: ${{ inputs.environment != 'dev-refactor' }}
        run: |
          set -eo pipefail
          source $CONFIG_FILE
          source ./deployment_functions.sh

          readModelROUsername=$(getSecretValue 'documentdb-ro-username')
          readModelROPassword=$(getSecretValue 'documentdb-ro-password')
          readModelProjectionUsername=$(getSecretValue 'documentdb-projection-username')
          readModelProjectionPassword=$(getSecretValue 'documentdb-projection-password')

          createReadModelUser "$readModelROUsername" "$readModelROPassword" "read"
          createReadModelUser "$readModelProjectionUsername" "$readModelProjectionPassword" "readWrite"

      - name: Create DEV-Refactor MongoDB User
        id: create_mongodb_user_refactor
        if: ${{ inputs.environment == 'dev-refactor' }}
        run: |
          set -eo pipefail
          source $CONFIG_FILE
          source ./deployment_functions.sh

          readModelROUsername=$(getSecretValue 'documentdb-ro-username-refactor')
          readModelROUserPassword=$(getSecretValue 'documentdb-ro-password-refactor')
          readModelProjectionUsername=$(getSecretValue 'documentdb-projection-username-refactor')
          readModelProjectionUserPassword=$(getSecretValue 'documentdb-projection-password-refactor')

          createReadModelUser "$readModelROUsername" "$readModelROUserPassword" "read"
          createReadModelUser "$readModelProjectionUsername" "$readModelProjectionUserPassword" "readWrite"

      - name: Prepare DB migrations
        id: prepare_db_migrations
        run: |
          set -eo pipefail
          source $CONFIG_FILE
          source ./deployment_functions.sh

          prepareDbMigrations

      - name: Prepare Event Store migrations
        id: prepare_event_store_migrations
        if: ${{ inputs.environment == 'dev-refactor' }}
        run: |
          set -eo pipefail
          source $CONFIG_FILE
          source ./deployment_functions.sh

          prepareEventStoreMigrations

      - name: Create Namespace
        id: create_namespace
        run: |
          set -eo pipefail
          source $CONFIG_FILE
          source ./deployment_functions.sh

          applyKubeFile "namespace.yaml"

      - name: Apply commons configmaps
        id: apply_commons_configmap
        if: ${{ inputs.environment == 'dev-refactor' }}
        run: |
          set -eo pipefail
          source $CONFIG_FILE
          source ./deployment_functions.sh

          commons_configmaps_path="commons/be-refactor/${{ inputs.environment }}"

          for f in "$commons_configmaps_path/*"; do
            applyKubeFile "$commons_configmaps_path/$f"
          done;

      - name: Create K8s Secrets
        id: create_secrets
        if: ${{ inputs.environment != 'dev-refactor' }}
        run: |
          set -eo pipefail
          source $CONFIG_FILE
          source ./deployment_functions.sh

          userRegistryApiKey="$(getSecretValue 'user-registry-api-key')"
          partyProcessApiKey="$(getSecretValue 'party-process-api-key')"
          partyManagementApiKey="$(getSecretValue 'party-management-api-key')"
          selfcareV2ApiKey="$(getSecretValue 'selfcare-api-key')"
          selfcareBrokerConnectionString="$(getSecretValue 'selfcare-broker-connection-string')"
          postgresUsername="$(getSecretValue 'postgres-db-username')"
          postgresPassword="$(getSecretValue 'postgres-db-password')"
          projectionUsername="$(getSecretValue 'documentdb-projection-username')"
          projectionPassword="$(getSecretValue 'documentdb-projection-password')"
          projectionROUsername="$(getSecretValue 'documentdb-ro-username')"
          projectionROPassword="$(getSecretValue 'documentdb-ro-password')"
          metricsReportRecipients="$(getSecretValue 'metrics-reports-recipients')"
          metricsReportSmtpUsername="$(getSecretValue 'metrics-reports-smtp-username')"
          metricsReportSmtpPassword="$(getSecretValue 'metrics-reports-smtp-password')"
          botDtdOpendataGithubAccessToken="$(getSecretValue 'interop-external-integration-github-bot-pat')"
          pnConsumersMailRecipients="$(getSecretValue 'interop-pn-consumers-recipients')"
          onetrustClientId="$(getSecretValue 'onetrust-clientid')"
          onetrustClientSecret="$(getSecretValue 'onetrust-clientsecret')"
          smtpPecUsername="$(getSecretValue 'interop-pec-user')"
          smtpPecPassword="$(getSecretValue 'interop-pec-password')"
          pecSender="$(getSecretValue 'interop-pec-sender')"
          anacSftpHost="$(getSecretValue 'anac-sftp-host')"
          anacSftpUsername="$(getSecretValue 'anac-sftp-username')"
          anacSftpPassword="$(getSecretValue 'anac-sftp-password')"

          createKubeSecret 'anac' 'SFTP_HOST' "$anacSftpHost" 'SFTP_USERNAME' "$anacSftpUsername" 'SFTP_PASSWORD' "$anacSftpPassword"
          createKubeSecret 'selfcare-v2' 'SELFCARE_V2_API_KEY' "$selfcareV2ApiKey" 'SELFCARE_BROKER_CONNECTION_STRING' "$selfcareBrokerConnectionString"
          createKubeSecret 'postgres' 'POSTGRES_USR' "$postgresUsername" 'POSTGRES_PSW' "$postgresPassword"
          createKubeSecret 'documentdb' 'PROJECTION_USR' "$projectionUsername" 'PROJECTION_PSW' "$projectionPassword" 'READONLY_USR' "$projectionROUsername" 'READONLY_PSW' "$projectionROPassword"
          createKubeSecret 'metrics-reports' 'MAIL_RECIPIENTS' "$metricsReportRecipients" 'SMTP_USER' "$metricsReportSmtpUsername" 'SMTP_PASSWORD' "$metricsReportSmtpPassword" 'BOT_DTD_OPENDATA_GITHUB_ACCESS_TOKEN' $botDtdOpendataGithubAccessToken
          createKubeSecret 'pn-consumers' 'MAIL_RECIPIENTS' "$pnConsumersMailRecipients"
          createKubeSecret 'onetrust' 'ONETRUST_CLIENT_ID' "$onetrustClientId" 'ONETRUST_CLIENT_SECRET' "$onetrustClientSecret"
          createKubeSecret 'smtp-certified' 'PEC_SMTP_USER' "$smtpPecUsername" 'PEC_SMTP_PASSWORD' "$smtpPecPassword" 'PEC_SMTP_SENDER' "$pecSender"

      - name: Create DEV-Refactor K8s Secrets
        id: create_dev_refactor_secrets
        if: ${{ inputs.environment == 'dev-refactor' }}
        run: |
          set -eo pipefail
          source $CONFIG_FILE
          source ./deployment_functions.sh

          userRegistryApiKey="$(getSecretValue 'user-registry-api-key')"
          partyProcessApiKey="$(getSecretValue 'party-process-api-key')"
          partyManagementApiKey="$(getSecretValue 'party-management-api-key')"
          selfcareV2ApiKey="$(getSecretValue 'selfcare-api-key-refactor')"
          selfcareBrokerConnectionString="$(getSecretValue 'selfcare-broker-connection-string')"
          postgresUsername="$(getSecretValue 'postgres-db-username-refactor')"
          postgresPassword="$(getSecretValue 'postgres-db-password-refactor')"
          projectionUsername="$(getSecretValue 'documentdb-projection-username-refactor')"
          projectionPassword="$(getSecretValue 'documentdb-projection-password-refactor')"
          projectionROUsername="$(getSecretValue 'documentdb-ro-username-refactor')"
          projectionROPassword="$(getSecretValue 'documentdb-ro-password-refactor')"
          metricsReportRecipients="$(getSecretValue 'metrics-reports-recipients')"
          metricsReportSmtpUsername="$(getSecretValue 'metrics-reports-smtp-username')"
          metricsReportSmtpPassword="$(getSecretValue 'metrics-reports-smtp-password')"
          botDtdOpendataGithubAccessToken="$(getSecretValue 'interop-external-integration-github-bot-pat')"
          pnConsumersMailRecipients="$(getSecretValue 'interop-pn-consumers-recipients')"
          onetrustClientId="$(getSecretValue 'onetrust-clientid')"
          onetrustClientSecret="$(getSecretValue 'onetrust-clientsecret')"
          smtpPecUsername="$(getSecretValue 'interop-pec-user')"
          smtpPecPassword="$(getSecretValue 'interop-pec-password')"
          pecSender="$(getSecretValue 'interop-pec-sender')"
          anacSftpHost="$(getSecretValue 'anac-sftp-host')"
          anacSftpUsername="$(getSecretValue 'anac-sftp-username')"
          anacSftpPassword="$(getSecretValue 'anac-sftp-password')"

          createKubeSecret 'anac' 'SFTP_HOST' "$anacSftpHost" 'SFTP_USERNAME' "$anacSftpUsername" 'SFTP_PASSWORD' "$anacSftpPassword"
          createKubeSecret 'selfcare-v2' 'SELFCARE_V2_API_KEY' "$selfcareV2ApiKey" 'SELFCARE_BROKER_CONNECTION_STRING' "$selfcareBrokerConnectionString"
          createKubeSecret 'event-store' 'POSTGRES_USR' "$postgresUsername" 'POSTGRES_PSW' "$postgresPassword"
          createKubeSecret 'read-model' 'PROJECTION_USR' "$projectionUsername" 'PROJECTION_PSW' "$projectionPassword" 'READONLY_USR' "$projectionROUsername" 'READONLY_PSW' "$projectionROPassword"
          createKubeSecret 'metrics-reports' 'METRICS_REPORT_RECIPIENTS' "$metricsReportRecipients" 'METRICS_REPORT_SMTP_USERNAME' "$metricsReportSmtpUsername" 'METRICS_REPORT_SMTP_PASSWORD' "$metricsReportSmtpPassword" 'BOT_DTD_OPENDATA_GITHUB_ACCESS_TOKEN' $botDtdOpendataGithubAccessToken
          createKubeSecret 'pn-consumers' 'MAIL_RECIPIENTS' "$pnConsumersMailRecipients"
          createKubeSecret 'onetrust' 'ONETRUST_CLIENT_ID' "$onetrustClientId" 'ONETRUST_CLIENT_SECRET' "$onetrustClientSecret"
          createKubeSecret 'smtp-certified' 'PEC_SMTP_USER' "$smtpPecUsername" 'PEC_SMTP_PASSWORD' "$smtpPecPassword" 'PEC_SMTP_SENDER' "$pecSender"



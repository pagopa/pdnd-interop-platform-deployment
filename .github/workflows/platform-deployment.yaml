name: Platform Deployment (latest)

on:
  push:
    branches:
      - "PIN-2295"
  # workflow_dispatch:
  #   inputs:
  #     env:
  #       type: environment
  #       required: true
  #       description: Environment to deploy

jobs:
  create_runner:
    name: Create Self-Hosted Runner
    runs-on: ubuntu-22.04
    environment: dev
    permissions:
      contents: read
      id-token: write
    outputs:
      runner_name: ${{ steps.start_runner.outputs.runner_name }}

    steps:
      - name: Start GitHub Runner
        id: start_runner
        uses: pagopa/interop-github-runner-aws-create-action@main
        with:
          aws_region: ${{ secrets.AWS_REGION }}
          iam_role_arn: ${{ secrets.ECS_IAM_ROLE_ARN }}
          ecs_cluster_name: ${{ secrets.ECS_CLUSTER_NAME }}
          ecs_task_definition: ${{ secrets.TASK_DEFINITION }}
          ecs_container_name: github-runner
          ecs_task_subnet_id: ${{ secrets.SUBNET_ID }}
          ecs_task_sec_group: ${{ secrets.SEC_GROUP_ID }}
          pat_token: ${{ secrets.BOT_TOKEN }}

  platform_deployment_configs:
    name: Platform Deployment Configs
    needs: create_runner
    runs-on: [self-hosted, "${{ needs.create_runner.outputs.runner_name }}"]
    environment: dev
    permissions:
      contents: read
    env:
      NAMESPACE: ${{ secrets.NAMESPACE }}
      CONFIG_FILE: ${{ secrets.CONFIG_FILE }}
      ENVIRONMENT: ${{ secrets.ENVIRONMENT }}

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Update Kubeconfig
        id: update_kubeconfig
        run: |
          set -eo pipefail

          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Create MongoDB User
        id: create_mongodb_user
        run: |
          set -eo pipefail
          source $CONFIG_FILE
          source ./deployment_functions.sh

          readModelROUsername=$(getSecretValue 'documentdb-ro-username')
          readModelROPassword=$(getSecretValue 'documentdb-ro-password')
          readModelProjectionUsername=$(getSecretValue 'documentdb-projection-username')
          readModelProjectionPassword=$(getSecretValue 'documentdb-projection-password')

          createReadModelUser "$readModelROUsername" "$readModelROPassword" "read"
          createReadModelUser "$readModelProjectionUsername" "$readModelProjectionPassword" "readWrite"

      - name: Prepare DB migrations
        id: prepare_db_migrations
        run: |
          set -eo pipefail
          source $CONFIG_FILE
          source ./deployment_functions.sh

          prepareDbMigrations

      - name: Create Namespace
        id: create_namespace
        run: |
          set -eo pipefail
          source $CONFIG_FILE
          source ./deployment_functions.sh

          applyKubeFile "namespace.yaml"

      - name: Create K8s Secrets
        id: create_secrets
        run: |
          set -eo pipefail
          source $CONFIG_FILE
          source ./deployment_functions.sh

          userRegistryApiKey="$(getSecretValue 'user-registry-api-key')"
          partyProcessApiKey="$(getSecretValue 'party-process-api-key')"
          partyManagementApiKey="$(getSecretValue 'party-management-api-key')"
          postgresUsername="$(getSecretValue 'postgres-db-username')"
          postgresPassword="$(getSecretValue 'postgres-db-password')"
          projectionUsername="$(getSecretValue 'documentdb-projection-username')"
          projectionPassword="$(getSecretValue 'documentdb-projection-password')"
          projectionROUsername="$(getSecretValue 'documentdb-ro-username')"
          projectionROPassword="$(getSecretValue 'documentdb-ro-password')"
          vaultAddr="$(getSecretValue 'vault-addr')"
          vaultToken="$(getSecretValue 'vault-token')"

          createKubeSecret 'user-registry' 'USER_REGISTRY_API_KEY' "$userRegistryApiKey"
          createKubeSecret 'party-process' 'PARTY_PROCESS_API_KEY' "$partyProcessApiKey"
          createKubeSecret 'party-management' 'PARTY_MANAGEMENT_API_KEY' "$partyManagementApiKey"
          createKubeSecret 'postgres' 'POSTGRES_USR' "$postgresUsername" 'POSTGRES_PSW' "$postgresPassword"
          createKubeSecret 'documentdb' 'PROJECTION_USR' "$projectionUsername" 'PROJECTION_PSW' "$projectionPassword" 'READONLY_USR' "$projectionROUsername" 'READONLY_PSW' "$projectionROPassword"
          createKubeSecret 'vault' 'VAULT_ADDR' "$vaultAddr" 'VAULT_TOKEN' "$vaultToken"

  deploy_frontend:
    name: Frontend
    needs: [create_runner, platform_deployment_configs]
    runs-on: [self-hosted, "${{ needs.create_runner.outputs.runner_name }}"]
    environment: dev
    permissions:
      contents: read
    env:
      NAMESPACE: ${{ secrets.NAMESPACE }}
      CONFIG_FILE: ${{ secrets.CONFIG_FILE }}
      ENVIRONMENT: ${{ secrets.ENVIRONMENT }}

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Update Kubeconfig
        id: update_kubeconfig
        run: |
          set -eo pipefail

          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Apply Kube Files
        id: apply_kube_files
        run: |
          set -eo pipefail
          source $CONFIG_FILE
          source ./deployment_functions.sh

          echo "Retrieving image digest for $FRONTEND_SERVICE_NAME version $FRONTEND_IMAGE_VERSION"
          imageDigest="$(getDockerImageDigest $FRONTEND_SERVICE_NAME $FRONTEND_IMAGE_VERSION)"
          echo "Image digest: $imageDigest"

          applyKubeFile "frontend/configmap.yaml" $FRONTEND_SERVICE_NAME
          applyKubeFile "frontend/deployment.yaml" $FRONTEND_SERVICE_NAME $imageDigest $FRONTEND_RESOURCE_CPU $FRONTEND_RESOURCE_MEM
          applyKubeFile "frontend/service.yaml" $FRONTEND_SERVICE_NAME

  # deploy_agreement_management:
  #   name: Agreement Management
  #   needs: [create_runner, platform_deployment_configs]
  #   permissions:
  #     contents: read
  #   uses: ./.github/workflows/deploy-service.yaml
  #   secrets: inherit
  #   with:
  #     runner_name: ${{ needs.create_runner.outputs.runner_name }}
  #     environment: dev
  #     kustomize_overlay_path: "overlays/agreement-management"
  #     service_name_var_name: AGREEMENT_MANAGEMENT_SERVICE_NAME
  #     image_version_var_name: AGREEMENT_MANAGEMENT_IMAGE_VERSION
  #     resource_cpu_var_name: AGREEMENT_MANAGEMENT_RESOURCE_CPU
  #     resource_mem_var_name: AGREEMENT_MANAGEMENT_RESOURCE_MEM


  delete_runner:
    name: Delete Self-Hosted Runner
    needs: [create_runner, platform_deployment_configs, deploy_frontend]
    if: ${{ always() }}
    runs-on: ubuntu-22.04
    environment: dev
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Stop Github Runner
        id: stop_runner
        uses: pagopa/interop-github-runner-aws-cleanup-action@main
        with:
          aws_region: ${{ secrets.AWS_REGION }}
          iam_role_arn: ${{ secrets.ECS_IAM_ROLE_ARN }}
          ecs_cluster_name: ${{ secrets.ECS_CLUSTER_NAME }}
          runner_name: ${{ needs.create_runner.outputs.runner_name }}
          pat_token: ${{ secrets.BOT_TOKEN }}
